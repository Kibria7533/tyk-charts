{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard-{{ include "tyk-dashboard.fullname" . }}
  labels:
    app: dashboard-{{ include "tyk-dashboard.fullname" . }}
    chart: {{ include "tyk-dashboard.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  minReadySeconds: 5
  strategy:
    # indicate which strategy we want for rolling update
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: dashboard-{{ include "tyk-dashboard.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: dashboard-{{ include "tyk-dashboard.fullname" . }}
        release: {{ .Release.Name }}
      annotations:
      # Enable backward compatibility to chart 0.8.1.
      {{- if .Values.enableIstioIngress }}
        traffic.sidecar.istio.io/excludeInboundPorts: "{{ .Values.containerPort }}"
        traffic.sidecar.istio.io/includeInboundPorts: ""
      {{- end }}
        checksum/secrets: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if .Values.mounts }}
        {{- range $secret := .Values.mounts }}
        "checksum/secret-{{ $secret.name }}": {{ include (print "mounts/%s" $secret.filename) . | sha256sum }}
        {{- end }}
        {{- end }}
    spec:
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
      containers:
      - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        name: dashboard-{{ .Chart.Name }}
        securityContext:
          runAsUser: 999
          runAsGroup: 999
{{/*          fsGroup: 2000*/}}
        env:
          ## DEFAULT TYK DASHBOARD CONFIGURATION
          - name: "TYK_DB_ENABLEOWNERSHIP"
            value: "{{ .Values.config.enableOwnership }}"
          - name: "TYK_DB_PAGESIZE"
            value: "{{ .Values.config.defaultPageSize }}"
          - name: "TYK_DB_REDISPORT"
            value: "{{ .Values.redis.port }}"
          - name: "TYK_DB_REDISHOST"
            value: "{{ .Values.redis.host }}"
          - name: "TYK_DB_NOTIFYONCHANGE"
            value: "{{ .Values.config.notifyOnChange }}"
          - name: "TYK_DB_HASHKEYS"
            value: "{{ .Values.config.hashKeys }}"
          - name: "TYK_DB_ENABLEDUPLICATESLUGS"
            value: "{{ .Values.config.enableDuplicateSlugs }}"
          - name: "TYK_DB_SHOWORGID"
            value: "{{ .Values.config.showOrgId }}"
          - name: "TYK_DB_ENABLEHOSTNAMES"
            value: "{{ .Values.config.hostConfig.enableHostNames }}"
          - name: "TYK_DB_DISABLEORIGSLUGPREFIX"
            value: "{{ .Values.config.hostConfig.disableOrgSlugPrefix }}"
          - name: "TYK_DB_OVERRIDEHOSTNAME"
            value: "{{ .Values.config.hostConfig.overrideHostname }}"
          - name: "TYK_DB_HOMEDIR"
            value: "{{ .Values.config.homeDir }}"
          - name: "TYK_DB_USESHARDEDANALYTICS"
            value: "{{ .Values.config.useShardedAnalytics }}"
          - name: "TYK_DB_ENABLEAGGREGATELOOKUPS"
            value: "{{ .Values.config.enableAggregateLookups }}"
          - name: "TYK_DB_ENABLEANALYTICSCACHE"
            value: "{{ .Values.config.enableAnalyticsCache }}"
          - name: "TYK_DB_ALLOWEXPLICITPOLICYID"
            value: "{{ .Values.config.allowExplicitPolicyId }}"
          - name: "TYK_DB_OAUTHREDIRECTURISEPARATOR"
            value: "{{ .Values.config.oauthRedirectUriSeparator }}"
          - name: "TYK_DB_KEYREQUESTFIELDS"
            value: "{{ .Values.config.keyRequestFields }}"
          - name: "TYK_DB_DASHBOARDSESSIONLIFETIME"
            value: "{{ .Values.config.dashboardSessionLifetime }}"
          - name: "TYK_DB_SSOENABLEUSERLOOKUP"
            value: "{{ .Values.config.ssoEnableUserLookup }}"
          - name: "TYK_DB_NOTIFICATIONSLISTENPORT"
            value: "{{ .Values.config.notificationsListenPort }}"
          - name: "TYK_DB_ENABLEDELETEKEYBYHASH"
            value: "{{ .Values.config.enableDeleteKeyByHash }}"
          - name: "TYK_DB_ENABLEUPDATEKEYBYHASH"
            value: "{{ .Values.config.enableUpdateKeyByHash }}"
          - name: "TYK_DB_ENABLEHASHEDKEYSLISTING"
            value: "{{ .Values.config.enableHashedKeysListing }}"
          - name: "TYK_DB_ENABLEMULTIORGUSERS"
            value: "{{ .Values.config.enableMultiOrgUsers }}"
          ## DEFAULT TYK CONFIGURATION END
          - name: TYK_DB_LISTENPORT
            value: "{{ .Values.containerPort }}"
          # Legacy support for Redis Cluster driver. Driver dropped in v3.0.0.
          - name: REDIGOCLUSTER_SHARDCOUNT
            value: "128"
          - name: TYK_DB_TYKAPI_HOST
            # this needs to be setup from values
            value: {{.Values.gateway.host}}
          - name: TYK_DB_TYKAPI_PORT
            value: "{{ .Values.gateway.port }}"
          - name: TYK_DB_TYKAPI_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-dashboard.fullname" . }} {{ end}}
                key: APISecret
          - name: TYK_DB_ADMINSECRET
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-dashboard.fullname" . }} {{ end}}
                key: AdminSecret
          - name: TYK_DB_NODESECRET
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-dashboard.fullname" . }} {{ end}}
                key: APISecret
          - name: TYK_DB_LICENSEKEY
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-dashboard.fullname" . }} {{ end}}
                key: DashLicense
            
          - name: TYK_DB_REDISADDRS
            value: {{ include "tyk-dashboard.redis_url" . | quote }}
          - name: TYK_DB_ENABLECLUSTER
            value: "{{ default "false" .Values.redis.enableCluster }}"
          - name: TYK_DB_REDISPASSWORD
            valueFrom:
              secretKeyRef:
                name:{{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-dashboard.fullname" . }} {{ end}}
                key: redisPass
          - name: TYK_DB_REDISUSESSL
            value: "{{ default "false" .Values.redis.useSSL }}"
          - name: TYK_DB_REDISSSLINSECURESKIPVERIFY
            value: "true"
            
          - name: TYK_DB_HTTPSERVEROPTIONS_USESSL
            value: "{{ .Values.tls }}"

          - name: TYK_DB_HOSTCONFIG_HOSTNAME
            value: "{{ .Values.hostName }}"
          - name: TYK_DB_HOSTCONFIG_GATEWAYHOSTNAME
            value: "{{ .Values.gateway.hostName }}"
          {{ if eq "postgres" (include "tyk-dashboard.backend" .) }}
          - name: TYK_DB_ENABLEAGGREGATELOOKUPS
            value: "false"
          - name: TYK_DB_STORAGE_MAIN_TYPE
            value: "postgres"
          - name: TYK_DB_STORAGE_MAIN_CONNECTIONSTRING
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-dashboard.fullname" . }} {{ end }}
                key: pgConnectionString

          - name: TYK_DB_STORAGE_ANALYTICS_TYPE
            value: "postgres"
          - name: TYK_DB_STORAGE_ANALYTICS_CONNECTIONSTRING
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-dashboard.fullname" . }} {{ end }}
                key: pgConnectionString

          - name: TYK_DB_STORAGE_UPTIME_TYPE
            value: "postgres"
          - name: TYK_DB_STORAGE_UPTIME_CONNECTIONSTRING
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-dashboard.fullname" . }} {{ end }}
                key: pgConnectionString
          {{ else }}
          - name: TYK_DB_STORAGE_MAIN_TYPE
            value: "mongo"
          - name: TYK_DB_MONGOURL
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-dashboard.fullname" . }} {{ end}}
                key: mongoURL
          - name: TYK_DB_MONGOUSESSL
            value: "{{ default "false" .Values.mongo.useSSL }}"
          {{ end }}
          {{- if .Values.extraEnvs }}
          {{- include "tyk-dashboard.tplvalues.render" ( dict "value" .Values.extraEnvs "context" $ ) | nindent 10 }}
          {{- end }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
        command: ["/opt/tyk-dashboard/tyk-analytics"]
        ports:
        - containerPort: {{ .Values.containerPort }}
        volumeMounts:
          {{- if .Values.mounts }}
          {{- range $secret := .Values.mounts }}
          - name: {{ $.Release.Name }}-dash-secret-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}
          {{- end }}
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          {{- include "tyk-dashboard.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 10 }}
          {{- end }}
        livenessProbe:
          httpGet:
            scheme: "HTTP{{ if .Values.tls }}S{{ end }}"
            path: /
            port: {{ .Values.containerPort }}
          initialDelaySeconds: 10
          periodSeconds: 2
          timeoutSeconds: 3
          failureThreshold: 2
        readinessProbe:
          httpGet:
            scheme: "HTTP{{ if .Values.tls }}S{{ end }}"
            path: /
            port: {{ .Values.containerPort }}
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
      {{- if .Values.securityContext }}
      securityContext:
      {{- toYaml .Values.securityContext | nindent 10 }}
      {{- end }}
      volumes:
        {{- if .Values.mounts }}
        {{- range $secret := .Values.mounts }}
        - name: {{ $.Release.Name }}-dash-secret-{{ $secret.name }}
          secret:
            secretName: {{ $.Release.Name }}-dash-secret-{{ $secret.name }}
        {{- end }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "tyk-dashboard.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}
